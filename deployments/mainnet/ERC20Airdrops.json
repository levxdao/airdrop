{
  "address": "0xea65fBF921e3868BDA21210A7E73e7201c1E22bD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "AddMerkleRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deadlineOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "walletOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3029d9da66f93cbc111a3f398b7b9fbc6d2ae2758e8f19b93c086569889fe1e5",
  "receipt": {
    "to": null,
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": "0xea65fBF921e3868BDA21210A7E73e7201c1E22bD",
    "transactionIndex": 119,
    "gasUsed": "665908",
    "logsBloom": "0x
    "blockHash": "0xc62ea6d5d8337f62f6df49bfa0e1f07f92c8a5cf720b1f1fcb07ed68dede8952",
    "transactionHash": "0x3029d9da66f93cbc111a3f398b7b9fbc6d2ae2758e8f19b93c086569889fe1e5",
    "logs": [],
    "blockNumber": 13733897,
    "cumulativeGasUsed": "7259354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "06945bbd7d57050e44d9383769243f67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AddMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deadlineOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"walletOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Airdrops.sol\":\"ERC20Airdrops\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/ERC20Airdrops.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./MerkleProof.sol\\\";\\n\\ncontract ERC20Airdrops is MerkleProof {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => mapping(bytes32 => uint256)) public deadlineOf;\\n    mapping(address => mapping(bytes32 => address)) public walletOf;\\n    mapping(address => mapping(bytes32 => mapping(bytes32 => bool))) internal _hasClaimed;\\n\\n    event AddMerkleRoot(address indexed token, bytes32 indexed merkleRoot, address wallet, uint256 deadline);\\n    event Claim(\\n        address indexed token,\\n        bytes32 indexed merkleRoot,\\n        address wallet,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    function addMerkleRoot(\\n        address token,\\n        bytes32 merkleRoot,\\n        uint256 deadline\\n    ) external {\\n        address wallet = walletOf[token][merkleRoot];\\n        require(wallet == address(0), \\\"LEVX: DUPLICATE_ROOT\\\");\\n        walletOf[token][merkleRoot] = msg.sender;\\n        deadlineOf[token][merkleRoot] = deadline;\\n\\n        emit AddMerkleRoot(token, merkleRoot, msg.sender, deadline);\\n    }\\n\\n    function claim(\\n        address token,\\n        bytes32 merkleRoot,\\n        bytes32[] calldata merkleProof,\\n        uint256 amount\\n    ) external {\\n        address wallet = walletOf[token][merkleRoot];\\n        require(wallet != address(0), \\\"LEVX: INVALID_ROOT\\\");\\n        require(block.timestamp < deadlineOf[token][merkleRoot], \\\"LEVX: EXPIRED\\\");\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amount));\\n        require(!_hasClaimed[token][merkleRoot][leaf], \\\"LEVX: FORBIDDEN\\\");\\n        require(verify(merkleRoot, leaf, merkleProof), \\\"LEVX: INVALID_PROOF\\\");\\n\\n        _hasClaimed[token][merkleRoot][leaf] = true;\\n        IERC20(token).safeTransferFrom(wallet, msg.sender, amount);\\n\\n        emit Claim(token, merkleRoot, wallet, msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xecc036a3cab57e5484c2bda300ec4191b31d420b785f209969742f9a01f4cfc4\",\"license\":\"UNLICENSED\"},\"contracts/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.3;\\n\\ncontract MerkleProof {\\n    function verify(\\n        bytes32 root,\\n        bytes32 leaf,\\n        bytes32[] memory proof\\n    ) public pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xa2580b5332ea27ce626df7151b099d63c8136644814c475307be8a884984b58c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b14806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e2216391461005c5780633423e5481461009757806372d9e80e146100ba578063dbc4428714610106578063e6bf2d2b1461011b575b600080fd5b61008461006a366004610849565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6100aa6100a5366004610951565b61012e565b604051901515815260200161008e565b6100ee6100c8366004610849565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200161008e565b6101196101143660046108ff565b6101ee565b005b610119610129366004610872565b6102e8565b600082815b83518110156101e157600084828151811061015e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808310156101a15760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506101ce565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806101d981610aa1565b915050610133565b50841490505b9392505050565b6001600160a01b03808416600090815260016020908152604080832086845290915290205416801561025e5760405162461bcd60e51b8152602060048201526014602482015273131155960e88111554131250d0551157d493d3d560621b60448201526064015b60405180910390fd5b6001600160a01b0384166000818152600160209081526040808320878452825280832080546001600160a01b0319163390811790915584845283835281842088855283529281902086905580519283529082018590528592917ff832bb2c734651ba6688258ddfd5a808b6a3bab0dd28cff55069b31f2fcadfb2910160405180910390a350505050565b6001600160a01b03808616600090815260016020908152604080832088845290915290205416806103505760405162461bcd60e51b8152602060048201526012602482015271131155960e881253959053125117d493d3d560721b6044820152606401610255565b6001600160a01b03861660009081526020818152604080832088845290915290205442106103b05760405162461bcd60e51b815260206004820152600d60248201526c131155960e8811561412549151609a1b6044820152606401610255565b6040516bffffffffffffffffffffffff193360601b1660208201526034810183905260009060540160408051601f1981840301815291815281516020928301206001600160a01b038a166000908152600284528281208a8252845282812082825290935291205490915060ff161561045c5760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102327a92124a22222a760891b6044820152606401610255565b61049a868287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061012e92505050565b6104dc5760405162461bcd60e51b81526020600482015260136024820152722622ab2c1d1024a72b20a624a22fa82927a7a360691b6044820152606401610255565b6001600160a01b03871660008181526002602090815260408083208a845282528083208584529091529020805460ff1916600117905561051e90833386610572565b604080516001600160a01b0384811682526020820186905233928992918b16917f4e9280a30a7b8bf8cc9e40adaafc3a609b22232a82740710c4166afd8217c184910160405180910390a450505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105cc9085906105d2565b50505050565b6000610627826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106a99092919063ffffffff16565b8051909150156106a457808060200190518101906106459190610931565b6106a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610255565b505050565b60606106b884846000856106c0565b949350505050565b6060824710156107215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610255565b61072a856107ef565b6107765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b031685876040516107929190610a26565b60006040518083038185875af1925050503d80600081146107cf576040519150601f19603f3d011682016040523d82523d6000602084013e6107d4565b606091505b50915091506107e48282866107f9565b979650505050505050565b803b15155b919050565b606083156108085750816101e7565b8251156108185782518084602001fd5b8160405162461bcd60e51b81526004016102559190610a42565b80356001600160a01b03811681146107f457600080fd5b6000806040838503121561085b578182fd5b61086483610832565b946020939093013593505050565b600080600080600060808688031215610889578081fd5b61089286610832565b945060208601359350604086013567ffffffffffffffff808211156108b5578283fd5b818801915088601f8301126108c8578283fd5b8135818111156108d6578384fd5b8960208260051b85010111156108ea578384fd5b96999598505060200195606001359392505050565b600080600060608486031215610913578283fd5b61091c84610832565b95602085013595506040909401359392505050565b600060208284031215610942578081fd5b815180151581146101e7578182fd5b600080600060608486031215610965578283fd5b833592506020808501359250604085013567ffffffffffffffff8082111561098b578384fd5b818701915087601f83011261099e578384fd5b8135818111156109b0576109b0610ac8565b8060051b604051601f19603f830116810181811085821117156109d5576109d5610ac8565b604052828152858101935084860182860187018c10156109f3578788fd5b8795505b83861015610a155780358552600195909501949386019386016109f7565b508096505050505050509250925092565b60008251610a38818460208701610a75565b9190910192915050565b6000602082528251806020840152610a61816040850160208701610a75565b601f01601f19169190910160400192915050565b60005b83811015610a90578181015183820152602001610a78565b838111156105cc5750506000910152565b6000600019821415610ac157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212202f2270b348221628999c611f33619b709c5e2d031b25ac41bafca0b647a9af9764736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630e2216391461005c5780633423e5481461009757806372d9e80e146100ba578063dbc4428714610106578063e6bf2d2b1461011b575b600080fd5b61008461006a366004610849565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6100aa6100a5366004610951565b61012e565b604051901515815260200161008e565b6100ee6100c8366004610849565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200161008e565b6101196101143660046108ff565b6101ee565b005b610119610129366004610872565b6102e8565b600082815b83518110156101e157600084828151811061015e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808310156101a15760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506101ce565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806101d981610aa1565b915050610133565b50841490505b9392505050565b6001600160a01b03808416600090815260016020908152604080832086845290915290205416801561025e5760405162461bcd60e51b8152602060048201526014602482015273131155960e88111554131250d0551157d493d3d560621b60448201526064015b60405180910390fd5b6001600160a01b0384166000818152600160209081526040808320878452825280832080546001600160a01b0319163390811790915584845283835281842088855283529281902086905580519283529082018590528592917ff832bb2c734651ba6688258ddfd5a808b6a3bab0dd28cff55069b31f2fcadfb2910160405180910390a350505050565b6001600160a01b03808616600090815260016020908152604080832088845290915290205416806103505760405162461bcd60e51b8152602060048201526012602482015271131155960e881253959053125117d493d3d560721b6044820152606401610255565b6001600160a01b03861660009081526020818152604080832088845290915290205442106103b05760405162461bcd60e51b815260206004820152600d60248201526c131155960e8811561412549151609a1b6044820152606401610255565b6040516bffffffffffffffffffffffff193360601b1660208201526034810183905260009060540160408051601f1981840301815291815281516020928301206001600160a01b038a166000908152600284528281208a8252845282812082825290935291205490915060ff161561045c5760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102327a92124a22222a760891b6044820152606401610255565b61049a868287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061012e92505050565b6104dc5760405162461bcd60e51b81526020600482015260136024820152722622ab2c1d1024a72b20a624a22fa82927a7a360691b6044820152606401610255565b6001600160a01b03871660008181526002602090815260408083208a845282528083208584529091529020805460ff1916600117905561051e90833386610572565b604080516001600160a01b0384811682526020820186905233928992918b16917f4e9280a30a7b8bf8cc9e40adaafc3a609b22232a82740710c4166afd8217c184910160405180910390a450505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105cc9085906105d2565b50505050565b6000610627826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106a99092919063ffffffff16565b8051909150156106a457808060200190518101906106459190610931565b6106a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610255565b505050565b60606106b884846000856106c0565b949350505050565b6060824710156107215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610255565b61072a856107ef565b6107765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b031685876040516107929190610a26565b60006040518083038185875af1925050503d80600081146107cf576040519150601f19603f3d011682016040523d82523d6000602084013e6107d4565b606091505b50915091506107e48282866107f9565b979650505050505050565b803b15155b919050565b606083156108085750816101e7565b8251156108185782518084602001fd5b8160405162461bcd60e51b81526004016102559190610a42565b80356001600160a01b03811681146107f457600080fd5b6000806040838503121561085b578182fd5b61086483610832565b946020939093013593505050565b600080600080600060808688031215610889578081fd5b61089286610832565b945060208601359350604086013567ffffffffffffffff808211156108b5578283fd5b818801915088601f8301126108c8578283fd5b8135818111156108d6578384fd5b8960208260051b85010111156108ea578384fd5b96999598505060200195606001359392505050565b600080600060608486031215610913578283fd5b61091c84610832565b95602085013595506040909401359392505050565b600060208284031215610942578081fd5b815180151581146101e7578182fd5b600080600060608486031215610965578283fd5b833592506020808501359250604085013567ffffffffffffffff8082111561098b578384fd5b818701915087601f83011261099e578384fd5b8135818111156109b0576109b0610ac8565b8060051b604051601f19603f830116810181811085821117156109d5576109d5610ac8565b604052828152858101935084860182860187018c10156109f3578788fd5b8795505b83861015610a155780358552600195909501949386019386016109f7565b508096505050505050509250925092565b60008251610a38818460208701610a75565b9190910192915050565b6000602082528251806020840152610a61816040850160208701610a75565b601f01601f19169190910160400192915050565b60005b83811015610a90578181015183820152602001610a78565b838111156105cc5750506000910152565b6000600019821415610ac157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212202f2270b348221628999c611f33619b709c5e2d031b25ac41bafca0b647a9af9764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1054,
        "contract": "contracts/ERC20Airdrops.sol:ERC20Airdrops",
        "label": "deadlineOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1060,
        "contract": "contracts/ERC20Airdrops.sol:ERC20Airdrops",
        "label": "walletOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_address))"
      },
      {
        "astId": 1068,
        "contract": "contracts/ERC20Airdrops.sol:ERC20Airdrops",
        "label": "_hasClaimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(bytes32 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}