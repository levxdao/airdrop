{
  "address": "0x3B8109853B983fE60a4A0a2d03296f94F4C2C026",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_levx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum LevxStreaming.AuthType",
          "name": "authType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "ChangeSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Start",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "enum LevxStreaming.AuthType",
          "name": "authType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "changeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "distributionOf",
      "outputs": [
        {
          "internalType": "enum LevxStreaming.AuthType",
          "name": "authType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "pendingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "authData",
          "type": "bytes"
        }
      ],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "streamingOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "startedAt",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountStreamed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x37c8cadc127181d893b0cacba852f0bdc198de18bbd784fbb23fded4387daca1",
  "receipt": {
    "to": null,
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": "0x3B8109853B983fE60a4A0a2d03296f94F4C2C026",
    "transactionIndex": 224,
    "gasUsed": "1453041",
    "logsBloom": "0x000000000000000001000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000010000000000000000000000100000000000000200040000000000000008000000080000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000500000000000000000000000000000a0000000000000000000000000000004000000800000000000000000000000000000",
    "blockHash": "0xe19a0e17526aa748c6fc632bc9cae348d4f63b8eecfef093ece54dd13661c04e",
    "transactionHash": "0x37c8cadc127181d893b0cacba852f0bdc198de18bbd784fbb23fded4387daca1",
    "logs": [
      {
        "transactionIndex": 224,
        "blockNumber": 13740351,
        "transactionHash": "0x37c8cadc127181d893b0cacba852f0bdc198de18bbd784fbb23fded4387daca1",
        "address": "0x3B8109853B983fE60a4A0a2d03296f94F4C2C026",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b8c253517b6bd003369173109693b01cb6841b5"
        ],
        "data": "0x",
        "logIndex": 233,
        "blockHash": "0xe19a0e17526aa748c6fc632bc9cae348d4f63b8eecfef093ece54dd13661c04e"
      },
      {
        "transactionIndex": 224,
        "blockNumber": 13740351,
        "transactionHash": "0x37c8cadc127181d893b0cacba852f0bdc198de18bbd784fbb23fded4387daca1",
        "address": "0x3B8109853B983fE60a4A0a2d03296f94F4C2C026",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005b8c253517b6bd003369173109693b01cb6841b5",
          "0x0000000000000000000000000903f8892c06a99bf1d68088fab597a0762e0bc8"
        ],
        "data": "0x",
        "logIndex": 234,
        "blockHash": "0xe19a0e17526aa748c6fc632bc9cae348d4f63b8eecfef093ece54dd13661c04e"
      },
      {
        "transactionIndex": 224,
        "blockNumber": 13740351,
        "transactionHash": "0x37c8cadc127181d893b0cacba852f0bdc198de18bbd784fbb23fded4387daca1",
        "address": "0x3B8109853B983fE60a4A0a2d03296f94F4C2C026",
        "topics": [
          "0x2c4c2330e655d7c5374379a59a72351868d5364faf6af52488661fa4e344f948",
          "0x0000000000000000000000005b8c253517b6bd003369173109693b01cb6841b5"
        ],
        "data": "0x",
        "logIndex": 235,
        "blockHash": "0xe19a0e17526aa748c6fc632bc9cae348d4f63b8eecfef093ece54dd13661c04e"
      }
    ],
    "blockNumber": 13740351,
    "cumulativeGasUsed": "12820021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0903f8892c06A99bf1D68088fAB597a0762e0BC8",
    "0xf474E526ADe9aD2CC2B66ffCE528B1A51B91FCdC",
    "0x5b8C253517b6Bd003369173109693B01cb6841B5"
  ],
  "solcInputHash": "96b5d16ee9a89a2538e85a223b24af43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_levx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum LevxStreaming.AuthType\",\"name\":\"authType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"ChangeSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"enum LevxStreaming.AuthType\",\"name\":\"authType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"distributionOf\",\"outputs\":[{\"internalType\":\"enum LevxStreaming.AuthType\",\"name\":\"authType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"pendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"authData\",\"type\":\"bytes\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"streamingOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStreamed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LevxStreaming.sol\":\"LevxStreaming\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\"},\"contracts/LevxStreaming.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./MerkleProof.sol\\\";\\n\\ncontract LevxStreaming is Ownable, MerkleProof {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant STREAMING_PERIOD = 180 days;\\n\\n    enum AuthType {\\n        ETHEREUM,\\n        SIGNED_ID\\n    }\\n\\n    struct Distribution {\\n        AuthType authType;\\n        uint32 deadline;\\n        address wallet;\\n    }\\n\\n    struct Streaming {\\n        address recipient;\\n        uint32 startedAt;\\n        uint256 amountTotal;\\n        uint256 amountStreamed;\\n    }\\n\\n    address public immutable levx;\\n    address public signer;\\n    mapping(bytes32 => Distribution) public distributionOf;\\n    mapping(bytes32 => Streaming) public streamingOf;\\n\\n    event ChangeSigner(address indexed signer);\\n    event Add(bytes32 indexed merkleRoot, AuthType authType, uint32 deadline, address indexed wallet);\\n    event Start(\\n        bytes32 indexed hash,\\n        bytes32 indexed merkleRoot,\\n        bytes32 indexed id,\\n        address recipient,\\n        uint256 amount\\n    );\\n    event Claim(bytes32 indexed hash, address indexed recipient, uint256 amount);\\n\\n    constructor(\\n        address _owner,\\n        address _levx,\\n        address _signer\\n    ) {\\n        levx = _levx;\\n        signer = _signer;\\n        _transferOwnership(_owner);\\n\\n        emit ChangeSigner(_signer);\\n    }\\n\\n    function changeSigner(address _signer) external onlyOwner {\\n        signer = _signer;\\n\\n        emit ChangeSigner(_signer);\\n    }\\n\\n    function add(\\n        bytes32 merkleRoot,\\n        AuthType authType,\\n        uint32 deadline,\\n        address wallet\\n    ) external onlyOwner {\\n        require(block.timestamp < deadline, \\\"LEVX: INVALID_DEADLINE\\\");\\n        require(wallet != address(0), \\\"LEVX: INVALID_WALLET\\\");\\n\\n        Distribution storage distribution = distributionOf[merkleRoot];\\n        require(distribution.wallet == address(0), \\\"LEVX: DUPLICATE_ROOT\\\");\\n        distribution.authType = authType;\\n        distribution.deadline = deadline;\\n        distribution.wallet = wallet;\\n\\n        emit Add(merkleRoot, authType, deadline, wallet);\\n    }\\n\\n    function start(\\n        bytes32 merkleRoot,\\n        bytes32[] calldata merkleProof,\\n        bytes memory authData\\n    ) external {\\n        Distribution storage distribution = distributionOf[merkleRoot];\\n        address wallet = distribution.wallet;\\n        require(wallet != address(0), \\\"LEVX: INVALID_ROOT\\\");\\n\\n        uint32 _now = uint32(block.timestamp);\\n        require(_now < distribution.deadline, \\\"LEVX: EXPIRED\\\");\\n\\n        (bytes32 id, uint256 amount, bytes32 leaf) = _parseAuthData(distribution.authType, authData);\\n        require(amount > 0, \\\"LEVX: INVALID_AMOUNT\\\");\\n        require(verify(merkleRoot, leaf, merkleProof), \\\"LEVX: INVALID_PROOF\\\");\\n\\n        bytes32 hash = keccak256(abi.encodePacked(merkleRoot, leaf));\\n        Streaming storage streaming = streamingOf[hash];\\n        require(streaming.startedAt == 0, \\\"LEVX: ALREADY_STARTED\\\");\\n        streaming.startedAt = _now;\\n        streaming.recipient = msg.sender;\\n        streaming.amountTotal = amount;\\n\\n        IERC20(levx).safeTransferFrom(wallet, address(this), amount);\\n\\n        emit Start(hash, merkleRoot, id, msg.sender, amount);\\n    }\\n\\n    function _parseAuthData(AuthType authType, bytes memory data)\\n        internal\\n        view\\n        returns (\\n            bytes32 id,\\n            uint256 amount,\\n            bytes32 leaf\\n        )\\n    {\\n        if (authType == AuthType.ETHEREUM) {\\n            id = bytes32(uint256(uint160(msg.sender)));\\n            amount = abi.decode(data, (uint256));\\n            leaf = keccak256(abi.encodePacked(msg.sender, amount));\\n        } else {\\n            (bytes32 _id, uint256 _amount, uint8 v, bytes32 r, bytes32 s) = abi.decode(\\n                data,\\n                (bytes32, uint256, uint8, bytes32, bytes32)\\n            );\\n            require(_id > 0, \\\"LEVX: INVALID_ID\\\");\\n\\n            id = _id;\\n            amount = _amount;\\n            leaf = keccak256(abi.encodePacked(id, amount));\\n            require(ECDSA.recover(ECDSA.toEthSignedMessageHash(leaf), v, r, s) == signer, \\\"LEVX: UNAUTHORIZED\\\");\\n        }\\n    }\\n\\n    function claim(bytes32 hash) external {\\n        Streaming storage streaming = streamingOf[hash];\\n        require(streaming.recipient == msg.sender, \\\"LEVX: FORBIDDEN\\\");\\n\\n        uint256 amount = _amountStreamed(streaming);\\n        uint256 pending = amount - streaming.amountStreamed;\\n        streaming.amountStreamed = amount;\\n\\n        IERC20(levx).safeTransfer(msg.sender, pending);\\n\\n        emit Claim(hash, msg.sender, pending);\\n    }\\n\\n    function pendingAmount(bytes32 hash) external view returns (uint256) {\\n        Streaming storage streaming = streamingOf[hash];\\n        return _amountStreamed(streaming) - streaming.amountStreamed;\\n    }\\n\\n    function _amountStreamed(Streaming storage streaming) internal view returns (uint256) {\\n        uint256 duration = block.timestamp - streaming.startedAt;\\n        if (duration > STREAMING_PERIOD) duration = STREAMING_PERIOD;\\n        return (streaming.amountTotal * duration) / STREAMING_PERIOD;\\n    }\\n}\\n\",\"keccak256\":\"0x83b219f71d9019a03d17137c47f15b5a6e098806f4e5f609dde347c6a341cb15\",\"license\":\"UNLICENSED\"},\"contracts/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.3;\\n\\ncontract MerkleProof {\\n    function verify(\\n        bytes32 root,\\n        bytes32 leaf,\\n        bytes32[] memory proof\\n    ) public pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xa2580b5332ea27ce626df7151b099d63c8136644814c475307be8a884984b58c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620019ea380380620019ea833981016040819052620000349162000121565b6200003f33620000b4565b606082901b6001600160601b031916608052600180546001600160a01b0319166001600160a01b0383161790556200007783620000b4565b6040516001600160a01b038216907f2c4c2330e655d7c5374379a59a72351868d5364faf6af52488661fa4e344f94890600090a25050506200016a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011c57600080fd5b919050565b60008060006060848603121562000136578283fd5b620001418462000104565b9250620001516020850162000104565b9150620001616040850162000104565b90509250925092565b60805160601c61185362000197600039600081816101f20152818161060e015261079201526118536000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d1e7ade1161008c578063bd66528a11610066578063bd66528a14610255578063e2c1446914610268578063f2fde38b14610289578063fdcb15811461029c576100cf565b80637d1e7ade1461021e5780638da5cb5b14610231578063aad2b72314610242576100cf565b8063238ac933146100d45780633423e54814610104578063469f5dda1461012757806356be2f121461019d57806362df3472146101ed578063715018a614610214575b600080fd5b6001546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101176101123660046114ab565b6102af565b60405190151581526020016100fb565b61016e6101353660046113f5565b6003602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920463ffffffff16919084565b604080516001600160a01b03909516855263ffffffff90931660208501529183015260608201526080016100fb565b6101de6101ab3660046113f5565b60026020526000908152604090205460ff811690610100810463ffffffff1690600160281b90046001600160a01b031683565b6040516100fb93929190611688565b6100e77f000000000000000000000000000000000000000000000000000000000000000081565b61021c61036f565b005b61021c61022c36600461140d565b6103ae565b6000546001600160a01b03166100e7565b61021c6102503660046113bb565b610690565b61021c6102633660046113f5565b610704565b61027b6102763660046113f5565b6107f6565b6040519081526020016100fb565b61021c6102973660046113bb565b610825565b61021c6102aa366004611568565b6108c0565b600082815b83518110156103625760008482815181106102df57634e487b7160e01b600052603260045260246000fd5b602002602001015190508083101561032257604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061034f565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061035a816117d6565b9150506102b4565b50841490505b9392505050565b6000546001600160a01b031633146103a25760405162461bcd60e51b8152600401610399906116ee565b60405180910390fd5b6103ac6000610a9c565b565b60008481526002602052604090208054600160281b90046001600160a01b0316806104105760405162461bcd60e51b8152602060048201526012602482015271131155960e881253959053125117d493d3d560721b6044820152606401610399565b8154429063ffffffff6101009091048116908216106104615760405162461bcd60e51b815260206004820152600d60248201526c131155960e8811561412549151609a1b6044820152606401610399565b8254600090819081906104779060ff1688610aec565b925092509250600082116104c45760405162461bcd60e51b8152602060048201526014602482015273131155960e881253959053125117d05353d5539560621b6044820152606401610399565b6105028a828b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102af92505050565b6105445760405162461bcd60e51b81526020600482015260136024820152722622ab2c1d1024a72b20a624a22fa82927a7a360691b6044820152606401610399565b6040805160208082018d905281830184905282518083038401815260609092018352815191810191909120600081815260039092529190208054600160a01b900463ffffffff16156105d05760405162461bcd60e51b8152602060048201526015602482015274131155960e881053149150511657d4d51054951151605a1b6044820152606401610399565b80546001600160a01b031963ffffffff808916600160a01b02919091166001600160c01b0319909216919091173317825560018201859055610643907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690899030908890610ce216565b604080513381526020810186905286918e9185917fe44ef46d6992c3b3a11790dfd4321a86b4dac7aaa1657ef6bc5800abff9eeb40910160405180910390a4505050505050505050505050565b6000546001600160a01b031633146106ba5760405162461bcd60e51b8152600401610399906116ee565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f2c4c2330e655d7c5374379a59a72351868d5364faf6af52488661fa4e344f94890600090a250565b600081815260036020526040902080546001600160a01b0316331461075d5760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102327a92124a22222a760891b6044820152606401610399565b600061076882610d53565b9050600082600201548261077c9190611793565b6002840183905590506107b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610da2565b604051818152339085907f46e470efd1d5601791612d2263f0a4437104a35be37a932cdc59dfe948c8dfbc9060200160405180910390a350505050565b6000818152600360205260408120600281015461081282610d53565b61081c9190611793565b9150505b919050565b6000546001600160a01b0316331461084f5760405162461bcd60e51b8152600401610399906116ee565b6001600160a01b0381166108b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610399565b6108bd81610a9c565b50565b6000546001600160a01b031633146108ea5760405162461bcd60e51b8152600401610399906116ee565b8163ffffffff1642106109385760405162461bcd60e51b81526020600482015260166024820152754c4556583a20494e56414c49445f444541444c494e4560501b6044820152606401610399565b6001600160a01b0381166109855760405162461bcd60e51b8152602060048201526014602482015273131155960e881253959053125117d5d05313115560621b6044820152606401610399565b60008481526002602052604090208054600160281b90046001600160a01b0316156109e95760405162461bcd60e51b8152602060048201526014602482015273131155960e88111554131250d0551157d493d3d560621b6044820152606401610399565b80548490829060ff191660018381811115610a1457634e487b7160e01b600052602160045260246000fd5b02179055508054610100600160c81b03191661010063ffffffff85160265010000000000600160c81b03191617600160281b6001600160a01b03841690810291909117825560405186907f269c6df58377534b2dcae341686bf140c485388547224f47f1ae59a035cd43c690610a8d9088908890611667565b60405180910390a35050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808080856001811115610b1157634e487b7160e01b600052602160045260246000fd5b1415610b74578351339350610b2f9085016020908101908601611611565b6040516bffffffffffffffffffffffff193360601b16602082015260348101829052909250605401604051602081830303815290604052805190602001209050610cdb565b600080600080600088806020019051810190610b9091906115c3565b945094509450945094506000801b8511610bdf5760405162461bcd60e51b815260206004820152601060248201526f131155960e881253959053125117d25160821b6044820152606401610399565b8497508396508787604051602001610c01929190918252602082015260400190565b60408051601f1981840301815291905280516020909101206001549096506001600160a01b0316610c8a610c82886040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b858585610dd7565b6001600160a01b031614610cd55760405162461bcd60e51b8152602060048201526012602482015271131155960e8815539055551213d49256915160721b6044820152606401610399565b50505050505b9250925092565b6040516001600160a01b0380851660248301528316604482015260648101829052610d4d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610dff565b50505050565b80546000908190610d7190600160a01b900463ffffffff1642611793565b905062ed4e00811115610d84575062ed4e005b62ed4e00818460010154610d989190611774565b61081c9190611754565b6040516001600160a01b038316602482015260448101829052610dd290849063a9059cbb60e01b90606401610d16565b505050565b6000806000610de887878787610ed1565b91509150610df581610fbe565b5095945050505050565b6000610e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111c19092919063ffffffff16565b805190915015610dd25780806020019051810190610e7291906113d5565b610dd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610399565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f085750600090506003610fb5565b8460ff16601b14158015610f2057508460ff16601c14155b15610f315750600090506004610fb5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f85573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610fae57600060019250925050610fb5565b9150600090505b94509492505050565b6000816004811115610fe057634e487b7160e01b600052602160045260246000fd5b1415610feb576108bd565b600181600481111561100d57634e487b7160e01b600052602160045260246000fd5b141561105b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610399565b600281600481111561107d57634e487b7160e01b600052602160045260246000fd5b14156110cb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610399565b60038160048111156110ed57634e487b7160e01b600052602160045260246000fd5b14156111465760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610399565b600481600481111561116857634e487b7160e01b600052602160045260246000fd5b14156108bd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610399565b60606111d084846000856111d8565b949350505050565b6060824710156112395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610399565b843b6112875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610399565b600080866001600160a01b031685876040516112a3919061164b565b60006040518083038185875af1925050503d80600081146112e0576040519150601f19603f3d011682016040523d82523d6000602084013e6112e5565b606091505b50915091506112f5828286611300565b979650505050505050565b6060831561130f575081610368565b82511561131f5782518084602001fd5b8160405162461bcd60e51b815260040161039991906116bb565b80356001600160a01b038116811461082057600080fd5b600082601f830112611360578081fd5b813567ffffffffffffffff81111561137a5761137a611807565b61138d601f8201601f1916602001611723565b8181528460208386010111156113a1578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156113cc578081fd5b61036882611339565b6000602082840312156113e6578081fd5b81518015158114610368578182fd5b600060208284031215611406578081fd5b5035919050565b60008060008060608587031215611422578283fd5b84359350602085013567ffffffffffffffff80821115611440578485fd5b818701915087601f830112611453578485fd5b813581811115611461578586fd5b8860208260051b8501011115611475578586fd5b602083019550809450506040870135915080821115611492578283fd5b5061149f87828801611350565b91505092959194509250565b6000806000606084860312156114bf578283fd5b833592506020808501359250604085013567ffffffffffffffff808211156114e5578384fd5b818701915087601f8301126114f8578384fd5b81358181111561150a5761150a611807565b8060051b915061151b848301611723565b8181528481019084860184860187018c1015611535578788fd5b8795505b83861015611557578035835260019590950194918601918601611539565b508096505050505050509250925092565b6000806000806080858703121561157d578384fd5b84359350602085013560028110611592578384fd5b9250604085013563ffffffff811681146115aa578283fd5b91506115b860608601611339565b905092959194509250565b600080600080600060a086880312156115da578081fd5b8551945060208601519350604086015160ff811681146115f8578182fd5b6060870151608090970151959894975095949392505050565b600060208284031215611622578081fd5b5051919050565b6002811061164757634e487b7160e01b600052602160045260246000fd5b9052565b6000825161165d8184602087016117aa565b9190910192915050565b604081016116758285611629565b63ffffffff831660208301529392505050565b606081016116968286611629565b63ffffffff9390931660208201526001600160a01b0391909116604090910152919050565b60006020825282518060208401526116da8160408501602087016117aa565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561174c5761174c611807565b604052919050565b60008261176f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561178e5761178e6117f1565b500290565b6000828210156117a5576117a56117f1565b500390565b60005b838110156117c55781810151838201526020016117ad565b83811115610d4d5750506000910152565b60006000198214156117ea576117ea6117f1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204d9caf6e74ea38436bb347d894db99350087e4c55a41cdde4e1849b15c95039364736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d1e7ade1161008c578063bd66528a11610066578063bd66528a14610255578063e2c1446914610268578063f2fde38b14610289578063fdcb15811461029c576100cf565b80637d1e7ade1461021e5780638da5cb5b14610231578063aad2b72314610242576100cf565b8063238ac933146100d45780633423e54814610104578063469f5dda1461012757806356be2f121461019d57806362df3472146101ed578063715018a614610214575b600080fd5b6001546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101176101123660046114ab565b6102af565b60405190151581526020016100fb565b61016e6101353660046113f5565b6003602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920463ffffffff16919084565b604080516001600160a01b03909516855263ffffffff90931660208501529183015260608201526080016100fb565b6101de6101ab3660046113f5565b60026020526000908152604090205460ff811690610100810463ffffffff1690600160281b90046001600160a01b031683565b6040516100fb93929190611688565b6100e77f000000000000000000000000000000000000000000000000000000000000000081565b61021c61036f565b005b61021c61022c36600461140d565b6103ae565b6000546001600160a01b03166100e7565b61021c6102503660046113bb565b610690565b61021c6102633660046113f5565b610704565b61027b6102763660046113f5565b6107f6565b6040519081526020016100fb565b61021c6102973660046113bb565b610825565b61021c6102aa366004611568565b6108c0565b600082815b83518110156103625760008482815181106102df57634e487b7160e01b600052603260045260246000fd5b602002602001015190508083101561032257604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061034f565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061035a816117d6565b9150506102b4565b50841490505b9392505050565b6000546001600160a01b031633146103a25760405162461bcd60e51b8152600401610399906116ee565b60405180910390fd5b6103ac6000610a9c565b565b60008481526002602052604090208054600160281b90046001600160a01b0316806104105760405162461bcd60e51b8152602060048201526012602482015271131155960e881253959053125117d493d3d560721b6044820152606401610399565b8154429063ffffffff6101009091048116908216106104615760405162461bcd60e51b815260206004820152600d60248201526c131155960e8811561412549151609a1b6044820152606401610399565b8254600090819081906104779060ff1688610aec565b925092509250600082116104c45760405162461bcd60e51b8152602060048201526014602482015273131155960e881253959053125117d05353d5539560621b6044820152606401610399565b6105028a828b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102af92505050565b6105445760405162461bcd60e51b81526020600482015260136024820152722622ab2c1d1024a72b20a624a22fa82927a7a360691b6044820152606401610399565b6040805160208082018d905281830184905282518083038401815260609092018352815191810191909120600081815260039092529190208054600160a01b900463ffffffff16156105d05760405162461bcd60e51b8152602060048201526015602482015274131155960e881053149150511657d4d51054951151605a1b6044820152606401610399565b80546001600160a01b031963ffffffff808916600160a01b02919091166001600160c01b0319909216919091173317825560018201859055610643907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690899030908890610ce216565b604080513381526020810186905286918e9185917fe44ef46d6992c3b3a11790dfd4321a86b4dac7aaa1657ef6bc5800abff9eeb40910160405180910390a4505050505050505050505050565b6000546001600160a01b031633146106ba5760405162461bcd60e51b8152600401610399906116ee565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f2c4c2330e655d7c5374379a59a72351868d5364faf6af52488661fa4e344f94890600090a250565b600081815260036020526040902080546001600160a01b0316331461075d5760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102327a92124a22222a760891b6044820152606401610399565b600061076882610d53565b9050600082600201548261077c9190611793565b6002840183905590506107b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610da2565b604051818152339085907f46e470efd1d5601791612d2263f0a4437104a35be37a932cdc59dfe948c8dfbc9060200160405180910390a350505050565b6000818152600360205260408120600281015461081282610d53565b61081c9190611793565b9150505b919050565b6000546001600160a01b0316331461084f5760405162461bcd60e51b8152600401610399906116ee565b6001600160a01b0381166108b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610399565b6108bd81610a9c565b50565b6000546001600160a01b031633146108ea5760405162461bcd60e51b8152600401610399906116ee565b8163ffffffff1642106109385760405162461bcd60e51b81526020600482015260166024820152754c4556583a20494e56414c49445f444541444c494e4560501b6044820152606401610399565b6001600160a01b0381166109855760405162461bcd60e51b8152602060048201526014602482015273131155960e881253959053125117d5d05313115560621b6044820152606401610399565b60008481526002602052604090208054600160281b90046001600160a01b0316156109e95760405162461bcd60e51b8152602060048201526014602482015273131155960e88111554131250d0551157d493d3d560621b6044820152606401610399565b80548490829060ff191660018381811115610a1457634e487b7160e01b600052602160045260246000fd5b02179055508054610100600160c81b03191661010063ffffffff85160265010000000000600160c81b03191617600160281b6001600160a01b03841690810291909117825560405186907f269c6df58377534b2dcae341686bf140c485388547224f47f1ae59a035cd43c690610a8d9088908890611667565b60405180910390a35050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808080856001811115610b1157634e487b7160e01b600052602160045260246000fd5b1415610b74578351339350610b2f9085016020908101908601611611565b6040516bffffffffffffffffffffffff193360601b16602082015260348101829052909250605401604051602081830303815290604052805190602001209050610cdb565b600080600080600088806020019051810190610b9091906115c3565b945094509450945094506000801b8511610bdf5760405162461bcd60e51b815260206004820152601060248201526f131155960e881253959053125117d25160821b6044820152606401610399565b8497508396508787604051602001610c01929190918252602082015260400190565b60408051601f1981840301815291905280516020909101206001549096506001600160a01b0316610c8a610c82886040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b858585610dd7565b6001600160a01b031614610cd55760405162461bcd60e51b8152602060048201526012602482015271131155960e8815539055551213d49256915160721b6044820152606401610399565b50505050505b9250925092565b6040516001600160a01b0380851660248301528316604482015260648101829052610d4d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610dff565b50505050565b80546000908190610d7190600160a01b900463ffffffff1642611793565b905062ed4e00811115610d84575062ed4e005b62ed4e00818460010154610d989190611774565b61081c9190611754565b6040516001600160a01b038316602482015260448101829052610dd290849063a9059cbb60e01b90606401610d16565b505050565b6000806000610de887878787610ed1565b91509150610df581610fbe565b5095945050505050565b6000610e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111c19092919063ffffffff16565b805190915015610dd25780806020019051810190610e7291906113d5565b610dd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610399565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f085750600090506003610fb5565b8460ff16601b14158015610f2057508460ff16601c14155b15610f315750600090506004610fb5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f85573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610fae57600060019250925050610fb5565b9150600090505b94509492505050565b6000816004811115610fe057634e487b7160e01b600052602160045260246000fd5b1415610feb576108bd565b600181600481111561100d57634e487b7160e01b600052602160045260246000fd5b141561105b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610399565b600281600481111561107d57634e487b7160e01b600052602160045260246000fd5b14156110cb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610399565b60038160048111156110ed57634e487b7160e01b600052602160045260246000fd5b14156111465760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610399565b600481600481111561116857634e487b7160e01b600052602160045260246000fd5b14156108bd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610399565b60606111d084846000856111d8565b949350505050565b6060824710156112395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610399565b843b6112875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610399565b600080866001600160a01b031685876040516112a3919061164b565b60006040518083038185875af1925050503d80600081146112e0576040519150601f19603f3d011682016040523d82523d6000602084013e6112e5565b606091505b50915091506112f5828286611300565b979650505050505050565b6060831561130f575081610368565b82511561131f5782518084602001fd5b8160405162461bcd60e51b815260040161039991906116bb565b80356001600160a01b038116811461082057600080fd5b600082601f830112611360578081fd5b813567ffffffffffffffff81111561137a5761137a611807565b61138d601f8201601f1916602001611723565b8181528460208386010111156113a1578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156113cc578081fd5b61036882611339565b6000602082840312156113e6578081fd5b81518015158114610368578182fd5b600060208284031215611406578081fd5b5035919050565b60008060008060608587031215611422578283fd5b84359350602085013567ffffffffffffffff80821115611440578485fd5b818701915087601f830112611453578485fd5b813581811115611461578586fd5b8860208260051b8501011115611475578586fd5b602083019550809450506040870135915080821115611492578283fd5b5061149f87828801611350565b91505092959194509250565b6000806000606084860312156114bf578283fd5b833592506020808501359250604085013567ffffffffffffffff808211156114e5578384fd5b818701915087601f8301126114f8578384fd5b81358181111561150a5761150a611807565b8060051b915061151b848301611723565b8181528481019084860184860187018c1015611535578788fd5b8795505b83861015611557578035835260019590950194918601918601611539565b508096505050505050509250925092565b6000806000806080858703121561157d578384fd5b84359350602085013560028110611592578384fd5b9250604085013563ffffffff811681146115aa578283fd5b91506115b860608601611339565b905092959194509250565b600080600080600060a086880312156115da578081fd5b8551945060208601519350604086015160ff811681146115f8578182fd5b6060870151608090970151959894975095949392505050565b600060208284031215611622578081fd5b5051919050565b6002811061164757634e487b7160e01b600052602160045260246000fd5b9052565b6000825161165d8184602087016117aa565b9190910192915050565b604081016116758285611629565b63ffffffff831660208301529392505050565b606081016116968286611629565b63ffffffff9390931660208201526001600160a01b0391909116604090910152919050565b60006020825282518060208401526116da8160408501602087016117aa565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561174c5761174c611807565b604052919050565b60008261176f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561178e5761178e6117f1565b500290565b6000828210156117a5576117a56117f1565b500390565b60005b838110156117c55781810151838201526020016117ad565b83811115610d4d5750506000910152565b60006000198214156117ea576117ea6117f1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204d9caf6e74ea38436bb347d894db99350087e4c55a41cdde4e1849b15c95039364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LevxStreaming.sol:LevxStreaming",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2512,
        "contract": "contracts/LevxStreaming.sol:LevxStreaming",
        "label": "signer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2517,
        "contract": "contracts/LevxStreaming.sol:LevxStreaming",
        "label": "distributionOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Distribution)2499_storage)"
      },
      {
        "astId": 2522,
        "contract": "contracts/LevxStreaming.sol:LevxStreaming",
        "label": "streamingOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Streaming)2508_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AuthType)2491": {
        "encoding": "inplace",
        "label": "enum LevxStreaming.AuthType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Distribution)2499_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LevxStreaming.Distribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Distribution)2499_storage"
      },
      "t_mapping(t_bytes32,t_struct(Streaming)2508_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LevxStreaming.Streaming)",
        "numberOfBytes": "32",
        "value": "t_struct(Streaming)2508_storage"
      },
      "t_struct(Distribution)2499_storage": {
        "encoding": "inplace",
        "label": "struct LevxStreaming.Distribution",
        "members": [
          {
            "astId": 2494,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "authType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AuthType)2491"
          },
          {
            "astId": 2496,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "deadline",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2498,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "wallet",
            "offset": 5,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Streaming)2508_storage": {
        "encoding": "inplace",
        "label": "struct LevxStreaming.Streaming",
        "members": [
          {
            "astId": 2501,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2503,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "startedAt",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2505,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "amountTotal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2507,
            "contract": "contracts/LevxStreaming.sol:LevxStreaming",
            "label": "amountStreamed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}